name: Build Chromium

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      QT_VERSION: "5.15.2"
      WEB_ENGINE_BRANCH: "turtlebrowser_integration_5.15"
      CHROMIUM_BRANCH: "old/turtlebrowser_integration_chromium_87.0.4280.144_qt_5.15.2_testing3"
      COMMON_CONFIGURE_FLAGS: "-developer-build -opensource -confirm-license -nomake examples -nomake tests"
      QT_PACKAGE_NAME: "qt-everywhere-src-5.15.2"
      WORK_DIR: "Code"
      DEPOT_TOOLS_DIR: "Code/depot_tools"
      QT_DIR: "Code/qt-everywhere-src-5.15.2"
      QT_BUILD_DIR: "Code/qt5-build"
      WEB_ENGINE_DIR: "Code/qt-everywhere-src-5.15.2/qtwebengine"
      THIRD_PARTY_DIR: "Code/qt-everywhere-src-5.15.2/qtwebengine/src/3rdparty"
      CHROMIUM_DIR: "Code/qt-everywhere-src-5.15.2/qtwebengine/src/3rdparty/chromium"

    steps:
      - uses: actions/checkout@v2

      - name: Print environment
        shell: bash
        run: |
          echo "QT_VERSION:             ${{ env.QT_VERSION }}"
          echo "WEB_ENGINE_BRANCH:      ${{ env.WEB_ENGINE_BRANCH }}"
          echo "CHROMIUM_BRANCH:        ${{ env.CHROMIUM_BRANCH }}"
          echo "COMMON_CONFIGURE_FLAGS: ${{ env.COMMON_CONFIGURE_FLAGS }}"
          echo "QT_PACKAGE_NAME :       ${{ env.QT_PACKAGE_NAME }}"
          echo "WORK_DIR:               ${{ env.WORK_DIR }}"
          echo "DEPOT_TOOLS_DIR:        ${{ env.DEPOT_TOOLS_DIR }}"
          echo "QT_DIR:                 ${{ env.QT_DIR }}"
          echo "QT_BUILD_DIR:           ${{ env.QT_BUILD_DIR }}"
          echo "WEB_ENGINE_DIR:         ${{ env.WEB_ENGINE_DIR }}"
          echo "THIRD_PARTY_DIR:        ${{ env.THIRD_PARTY_DIR }}"
          echo "CHROMIUM_DIR:           ${{ env.CHROMIUM_DIR }}"

      - name: 1.  Make work directory
        shell: bash
        run: mkdir -p Code

      - name: 2.  Get Depot Tools
        shell: bash
        working-directory: ${{ env.WORK_DIR }}
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
#          run: echo "" >> $GITHUB_PATH

      - name: 3.  Get Qt
        shell: bash
        working-directory: ${{ env.WORK_DIR }}
        run: |
          curl -O -L https://download.qt.io/archive/qt/5.15/${{ env.QT_VERSION }}/single/${{ env.QT_PACKAGE_NAME }}.tar.xz
          tar xf ${{ env.QT_PACKAGE_NAME }}.tar.xz

      - name: 4.  Get QtWebEngine
        shell: bash
        working-directory: ${{ env.QT_DIR }}
        run: |
          mv qtwebengine old_qtwebengine
          git clone https://github.com/turtlebrowser/qtwebengine.git

      - name: 5.  Checkout the QtWebEngine branch
        shell: bash
        working-directory: ${{ env.WEB_ENGINE_DIR }}
        run: |
          git checkout ${{ env.WEB_ENGINE_BRANCH }}
          git pull

      - name: 6.  Get Chromium
        shell: bash
        working-directory: ${{ env.THIRD_PARTY_DIR }}
        run: |
          curl -LO https://github.com/turtlebrowser/chromium/archive/turtlebrowser_integration_chromium_87.0.4280.144_qt_5.15.2_testing3.zip
          unzip -q turtlebrowser_integration_chromium_87.0.4280.144_qt_5.15.2_testing3.zip
          mv chromium-turtlebrowser_integration_chromium_87.0.4280.144_qt_5.15.2_testing3 chromium

      - name: 7.  Make Qt build directory
        shell: bash
        working-directory: ${{ env.WORK_DIR }}
        run: mkdir -p ${{ env.QT_BUILD_DIR }}

      - name: 8.  Linux - Prepare Qt build directory
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        working-directory: ${{ env.QT_BUILD_DIR }}
        env:
          NINJAFLAGS: "-k 0"
        run: ../qt-everywhere-src-5.15.2/configure ${{ env.COMMON_CONFIGURE_FLAGS }} -platform linux-clang-libc++

      - name: 8.  Windows - Prepare Qt build directory
        if: matrix.os == 'windows-latest'
        shell: bash
        working-directory: ${{ env.QT_BUILD_DIR }}
        env:
          NINJAFLAGS: "-k 0"
        run: ../qt-everywhere-src-5.15.2/configure ${{ env.COMMON_CONFIGURE_FLAGS }} -platform win32-clang-msvc

      - name: 8.  Mac - Prepare Qt build directory
        if: matrix.os == 'macos-latest'
        shell: bash
        working-directory: ${{ env.QT_BUILD_DIR }}
        env:
          NINJAFLAGS: "-k 0"
        run: ../qt-everywhere-src-5.15.2/configure ${{ env.COMMON_CONFIGURE_FLAGS }} -platform macx-clang

      - name: 9.  Prepare Qt build directory
        shell: bash
        working-directory: ${{ env.QT_BUILD_DIR }}
        run: time make -j 8
        
