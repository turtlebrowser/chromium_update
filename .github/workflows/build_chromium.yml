name: Build Chromium

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      WINDOWS_SDK_VERSION: "10.0.19041.0" # see build/toolchain/win/setup_toolchain.py
      WINDOWS_TOOLCHAIN_HASH: "fdfc420dcd"

    steps:
      - uses: actions/checkout@v2

      - name: 0.  [All] Print environment
        shell: bash
        run: |
          echo "WINDOWS_SDK_VERSION:    ${{ env.WINDOWS_SDK_VERSION }}"
          echo "WINDOWS_TOOLCHAIN_HASH: ${{ env.WINDOWS_TOOLCHAIN_HASH }}"

      - name: 0.  [Windows] Find Visual Studio
        if: matrix.os == 'windows-latest'
        run: vswhere -latest -property installationPath

      - name: 0.  [Windows] Get-PSDrive
        if: matrix.os == 'windows-latest'
        run: Get-PSDrive

      - name: 0.  [Windows] LongPathsEnabled
        if: matrix.os == 'windows-latest'
        run: Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -value 1

      - name: 0.  [Windows] Get-Jom
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install jom
          echo "$HOME/scoop/shims/" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 0.  [Windows] Git longpaths
        if: matrix.os == 'windows-latest'
        run: git config --system core.longpaths true

      - name: 0.  [Linux] Free Disk Space
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-8.*'
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h
          echo "Removing large directories"
          rm -rf /usr/share/dotnet/
          df -h

# Debian Dependencies
# https://wiki.qt.io/Building_Qt_5_from_Git

      - name: 1.  [Linux] Add Build Dependencies
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get build-dep qt5-default
          sudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
          sudo apt-get install libssl-dev libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev libdbus-1-dev libfontconfig1-dev libcap-dev libxtst-dev libpulse-dev libudev-dev libpci-dev libnss3-dev libasound2-dev libxss-dev libegl1-mesa-dev gperf bison
          sudo apt-get install libasound2-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: 2.  [MacOS] Build up the environment
        if: matrix.os == 'macos-latest'
        shell: bash
        run: yes | bash update.sh -e -x -s -w $HOME

      - name: 2.  [Windows] Build up the environment
        if: matrix.os == 'windows-latest'
        shell: bash
        run: bash -c "yes || true" | bash update.sh -e -x -s

      - name: 3.  [Windows] Build Chromium
        if: matrix.os == 'windows-latest'
        shell: bash
        run: bash -c "yes || true" | bash update.sh -c -x

      - name: 4.  [Windows] Build Qt
        if: matrix.os == 'windows-latest'
        shell: bash
        run: bash -c "yes || true" | bash update.sh -q -x

      - name: 2.  [Linux] Build up the environment
        if: matrix.os == 'ubuntu-latest'
        run: yes | bash update.sh -e -x -s -w $HOME

      - name: 3.  [Linux] Build Chromium
        if: matrix.os == 'ubuntu-latest'
        run: yes | bash update.sh -c -x -w $HOME

      - name: 4.  [Linux] Build Qt
        if: matrix.os == 'ubuntu-latest'
        run: yes | bash update.sh -q -x -w $HOME

#      - name: 3.  [Windows] Make SDK toolchain zip
#        if: matrix.os == 'windows-latest' && steps.github-cache.outputs.cache-hit != 'true'
#        shell: bash
#        working-directory: ${{ env.DEPOT_TOOLS_DIR }}/win_toolchain
#        run: |
#          sed -i "/if len(matches)/s/^/#/g" package_from_installed.py #comment
#          sed -i "/  raise Exception('%s h/s/^/#/g" package_from_installed.py #comment
#          python package_from_installed.py 2019 -w ${{ env.WINDOWS_SDK_VERSION }}
#          cp *.zip ../../github_cache/
