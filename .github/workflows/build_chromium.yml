name: Build Qt

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # shell: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#using-a-specific-shell
        config:
        - {
            name: "Ubuntu 18.04",
            os: ubuntu-18.04,
            work_dir: "${{ github.workspace }}/work"
          }
        - {
            name: "Ubuntu 20.04",
            os: ubuntu-20.04,
            work_dir: "${{ github.workspace }}/work"
          }
        - {
            name: "Windows 2019",
            os: windows-2019,
            work_dir: "/c/Code"
          }
#        - {
#            name: "MacOS 11.0",
#            os: macos-11.0,
#            work_dir: "$HOME"
#          }
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      WINDOWS_SDK_VERSION: "10.0.19041.0" # see build/toolchain/win/setup_toolchain.py
      WINDOWS_TOOLCHAIN_HASH: "fdfc420dcd"

    steps:
      - uses: actions/checkout@v2

      - name: Using the builtin GitHub Cache Action for the work dir
        id: github-cache-conan
        uses: actions/cache@v1
        env:
          cache-name: cache-work-dir
        with:
          path: ${{ matrix.config.work_dir }}
          key: host-${{ runner.os }}-target-${{ runner.os }}-${{ matrix.config.os }}-${{ hashFiles('update.sh') }}

      - name: 0.  [All] Print environment
        shell: bash
        run: |
          echo "WINDOWS_SDK_VERSION:    ${{ env.WINDOWS_SDK_VERSION }}"
          echo "WINDOWS_TOOLCHAIN_HASH: ${{ env.WINDOWS_TOOLCHAIN_HASH }}"

      - name: 0.  [Linux] Free Disk Space
        if: startsWith(matrix.config.os, 'ubuntu')
        shell: bash
        run: |
          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-8.*'
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell # mono-devel
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h
          echo "Removing large directories"
          rm -rf /usr/share/dotnet/
          df -h

        # Get-PSDrive: Check how much free space there is
        # vswhere: Find path to latest Visual Studio
        # LongPathsEnabled: Checkout won't work without
        # core.longpaths: Checkout won't work without
        # jom: Needed for Qt build
        # Path: put depot_tools in the path
      - name: 1.  [Windows] Add Build Dependencies
        if: startsWith(matrix.config.os, 'windows')
        run: |
          Get-PSDrive
          vswhere -latest -property installationPath
          Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -value 1
          git config --system core.longpaths true
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install jom
          echo "$HOME/scoop/shims/" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\Code\depot_tools\" >> $GITHUB_PATH
          Add-MpPreference -ExclusionPath "C:\Code"

        # Debian Dependencies
        # https://wiki.qt.io/Building_Qt_5_from_Git
      - name: 1.  [Linux] Add Build Dependencies
        if: startsWith(matrix.config.os, 'ubuntu')
        shell: bash
        run: |
          sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get build-dep qt5-default
          sudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
          sudo apt-get install libssl-dev libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev libdbus-1-dev libfontconfig1-dev libcap-dev libxtst-dev libpulse-dev libudev-dev libpci-dev libnss3-dev libasound2-dev libxss-dev libegl1-mesa-dev gperf bison
          sudo apt-get install libasound2-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

        # gnu-sed: needed for the update.sh script
      - name: 1.  [MacOS] Add Build Dependencies
        if: startsWith(matrix.config.os, 'macos')
        shell: bash
        run: |
          brew install gnu-sed
          echo "/usr/local/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH

      - name: 2.  [All] Build up the environment
        shell: bash
        run: bash -c "yes || true" | bash update.sh -e -x -r -s -w ${{ matrix.config.work_dir }}

#      - name: 4.  [All] Build Chromium
#        shell: bash
#        run: bash -c "yes || true" | bash update.sh -c -x -w ${{ matrix.config.work_dir }}

#      - name: 3.  [All] Build Qt
#        shell: bash
#        run: bash -c "yes || true" | bash update.sh -q -x -r -j 4 -w ${{ matrix.config.work_dir }}

#      - name: 5.  [Windows] Make SDK toolchain zip
#        if: startsWith(matrix.config.os, 'windows') && steps.github-cache.outputs.cache-hit != 'true'
#        shell: bash
#        working-directory: ${{ env.DEPOT_TOOLS_DIR }}/win_toolchain
#        run: |
#          sed -i "/if len(matches)/s/^/#/g" package_from_installed.py #comment
#          sed -i "/  raise Exception('%s h/s/^/#/g" package_from_installed.py #comment
#          python package_from_installed.py 2019 -w ${{ env.WINDOWS_SDK_VERSION }}
#          cp *.zip ../../github_cache/
